from json import *

import math
import telebot
from telebot import types
from threading import Thread
import requests
import urllib3
import json
import time
import textwrap

from gemeni import api_key

Students = {}
Teachers = {}

is_run = True


api_key = "AIzaSyCPMMiv61hM9VDlfdPQJ2tHduJsPi_8tS4"






#–û–±—å—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
class event():
    def __init__(self, time, type):
        pass
class Teacher():
    def __init__(self, nickname):
        self.classes = []
        self.subjects = []
        self. nickname = nickname
        self.name = ""
        Teachers[self.nickname] = self
    def toJSON(self):
            return dumps(self.__dict__)

    def fromJSON(self, json_data):
            self.__dict__.update(loads(json_data))


def save_teachers_data(filename = "teachers.json"):
        global is_run
        while is_run:
            file = open(filename, "wb")
            data = {}
            for i in Teachers.keys():
                data[i] = Teachers[i].toJSON()
            file.write(bytes(dumps(data), "utf-8"))
            file.close()

def open_teachers_data(filename= "students.json"):
        file = open(filename, "rb")
        data = loads(file.read().decode("utf-8"))
        for i in data:
            teacher = Teacher()
            teacher.fromJSON(i)
        file.close()

class Class():
    def __init__(self, form):
        self.Themes = themes[str(form)]
        self.teachers = []
        self.form = form
        self.students = []



class Student():
    def __init__(self, nickname):
        self.subjects = []
        self.themes = []
        self.statistics = {}
        self.form = 1
        self.Class = None
        self.nickname = nickname
        self.studing_plan = {}
        self.name = ""
        Students[self.nickname] = self


    def toJSON(self):
            return dumps(self.__dict__)

    def fromJSON(self, json_data):
            self.__dict__.update(loads(json_data))


def save_students_data(filename = "students.json"):
        global is_run
        while is_run:
            file = open(filename, "wb")
            data = {}
            for i in Students.keys():
                data[i] = Students[i].toJSON()
            file.write(bytes(dumps(data), "utf-8"))
            file.close()

def open_students_data(filename= "students.json"):
        file = open(filename, "rb")
        data = loads(file.read().decode("utf-8"))
        for i in data.keys():
            student = Student(i)
            student.from_json(data[i])
        file.close()

#–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
file = open('themes.json', 'r')
themes = load(file)
file.close()
t1 = Thread(target=save_teachers_data)
t2 = Thread(target=save_students_data)
t1.start()
t2.start()

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞  –Ω–µ–π—Ä–æ—Å–µ—Ç–∏



# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def get_available_models(api_key):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    """
    url = f"https://generativelanguage.googleapis.com/v1/models?key={api_key}"

    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        response = requests.get(url, verify=False, timeout=60)

        if response.status_code == 200:
            models_data = response.json()
            #print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            for model in models_data.get('models', []):
                model_name = model['name'].split('/')[-1]
                display_name = model.get('displayName', 'N/A')
                methods = model.get('supportedGenerationMethods', [])
                #print(f"  - {model_name} ({display_name})")
                #print(f"    Supported methods: {methods}")
            return models_data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {response.status_code} - {response.text}")
            return None

    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π (60 —Å–µ–∫—É–Ω–¥)")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None
models = get_available_models(api_key)
def gemini_query_smart(api_key, query, timeout=120):
    """
    –£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    """
    #print("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    #models = get_available_models(api_key)

    if not models:
        raise "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"

    # –ò—â–µ–º –º–æ–¥–µ–ª–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ generateContent
    available_models = []
    for model in models.get('models', []):
        if 'generateContent' in model.get('supportedGenerationMethods', []):
            model_name = model['name'].split('/')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
            available_models.append(model_name)
            #print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–¥–µ–ª—å: {model_name}")

    if not available_models:
        raise "‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö generateContent"

    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
    model_to_use = available_models[1]
    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å: {model_to_use}")
    #print(f"‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {timeout} —Å–µ–∫—É–Ω–¥")

    url = f"https://generativelanguage.googleapis.com/v1/models/{model_to_use}:generateContent?key={api_key}"

    headers = {'Content-Type': 'application/json'}
    data = {
        "contents": [{
            "parts": [{"text": query}]
        }]
    }

    try:
        start_time = time.time()
        response = requests.post(url, headers=headers, json=data, verify=False, timeout=timeout)
        end_time = time.time()

        #print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

        if response.status_code == 200:
            result = response.json()
            if result.get('candidates'):
                return result['candidates'][0]['content']['parts'][0]['text']
            else:
                return "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
        else:
            error_text = response.text
            return f"‚ùå –û—à–∏–±–∫–∞ API ({response.status_code}): {error_text}"

    except requests.exceptions.Timeout:
        return f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ ({timeout} —Å–µ–∫—É–Ω–¥)"
    except requests.exceptions.ConnectionError:
        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    except Exception as e:
        return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"


def gemini_query_with_retry(api_key, query, max_retries=3, initial_timeout=60, max_timeout=300):
    """
    –ó–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ç–∞–π–º–∞—É—Ç–∞
    """
    for attempt in range(max_retries):
        timeout = min(initial_timeout * (2 ** attempt), max_timeout)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff

        #print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, —Ç–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫—É–Ω–¥")

        result = gemini_query_smart(api_key, query, timeout)

        if not result.startswith("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"):
            return result

        if attempt < max_retries - 1:
            wait_time = 5 * (attempt + 1)
            #print(f"‚è≥ –ñ–¥—É {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(wait_time)

    raise "‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Ç–∞–π–º–∞—É—Ç–æ–º"


def test_gemini_connection(api_key):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API...")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    #models = get_available_models(api_key)
    if not models:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return False

    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    test_response = gemini_query_smart(api_key, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '—Ä–∞–±–æ—Ç–∞–µ—Ç'", timeout=60)
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {test_response}")

    return "—Ä–∞–±–æ—Ç–∞–µ—Ç" in test_response.lower()

'''
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    API_KEY = api_key # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á

    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Gemini API —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º")
    print("=" * 60)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if test_gemini_connection(API_KEY):
        print("\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        while True:
            user_query = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ")
            if user_query.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                break

            if user_query.strip():
                print("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                response = gemini_query_with_retry(
                    API_KEY,
                    user_query,
                    max_retries=3,
                    initial_timeout=300,
                    max_timeout=3000  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                )
                print(f"\nü§ñ –û—Ç–≤–µ—Ç: {response}")
    #else:
    #    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gemini API")
    #    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    #    print("  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
    #    print("  - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    #    print("  - –î–æ—Å—Ç—É–ø –∫ Google APIs")
'''


#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = telebot.TeleBot('8215300847:AAHGW-KR6aJhm2uJgBtzdNJAYm093KwjVH0')
print("started")
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –£—á–µ–Ω–∏–∫")
    btn2 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –£—á–∏—Ç–µ–ª—å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ".format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def func(message):
    print(message.text)
    if(message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –£—á–µ–Ω–∏–∫"):
        if message.from_user.id  in Students or message.from_user.id in Teachers.keys():
            bot.send_message(message.chat.id, text="–í—ã  —É–∂–µ –∑–∞—Ä–∞–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            return
        student = Student(message.from_user.id)
        bot.send_message(message.chat.id, text="–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    elif(message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –£—á–∏—Ç–µ–ª—å"):
        if message.from_user.id in Students or message.from_user.id in Teachers.keys():
            bot.send_message(message.chat.id, text="–í—ã  —É–∂–µ –∑–∞—Ä–∞–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            return
        teacher = Teacher(message.from_user.id)
        bot.send_message(message.chat.id, text="–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    else:
            response = gemini_query_with_retry(
            api_key,
            message.text,
            max_retries=3,
            initial_timeout=300,
            max_timeout=3000  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            )

            for i in textwrap.wrap(response, 10000):
                bot.send_message(message.chat.id, i)








    """
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç', url='https://habr.com/ru/all/')
    bot.send_photo(message.from_user.id, photo=open('2025-10-25 12.50.58.jpg', 'rb'))
    markup.add(btn1)
    print(message.from_user.id)
    bot.send_message(message.from_user.id, "–ù—É —á—Ç–æ –¥–≤–æ–µ—à–Ω–∏–∫–∏, –Ω–∞—Ä–∫–æ–º–∞–Ω—ã, –≤—ç–π–ø–µ—Ä—ã? –†–∞–±–æ—Ç–∞—Ç—å –ë—É–¥–µ–º????!", reply_markup = markup)
    """
print("start_polling")
bot.polling(none_stop=True, interval=1) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å