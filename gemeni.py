import aiohttp
import asyncio
import ssl
import json


async def get_available_models(api_key: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    """
    url = f"https://generativelanguage.googleapis.com/v1/models?key={api_key}"

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    connector = aiohttp.TCPConnector(ssl=ssl_context)

    try:
        async with aiohttp.ClientSession(connector=connector) as session:
            async with session.get(url) as response:
                if response.status == 200:
                    models_data = await response.json()
                    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
                    for model in models_data.get('models', []):
                        print(f"  - {model['name']} ({model['displayName']})")
                        print(f"    Supported methods: {model.get('supportedGenerationMethods', [])}")
                    return models_data
                else:
                    error = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {error}")
                    return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


async def gemini_query_smart(api_key: str, query: str):
    """
    –£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    """
    print("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    models = await get_available_models(api_key)

    if not models:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"

    # –ò—â–µ–º –º–æ–¥–µ–ª–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ generateContent
    available_models = []
    for model in models.get('models', []):
        if 'generateContent' in model.get('supportedGenerationMethods', []):
            model_name = model['name'].split('/')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
            available_models.append(model_name)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–¥–µ–ª—å: {model_name}")

    if not available_models:
        return "‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö generateContent"

    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
    model_to_use = available_models[0]
    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å: {model_to_use}")

    url = f"https://generativelanguage.googleapis.com/v1/models/{model_to_use}:generateContent?key={api_key}"

    headers = {'Content-Type': 'application/json'}
    data = {
        "contents": [{
            "parts": [{"text": query}]
        }]
    }

    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    connector = aiohttp.TCPConnector(ssl=ssl_context)

    try:
        async with aiohttp.ClientSession(connector=connector) as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('candidates'):
                        return result['candidates'][0]['content']['parts'][0]['text']
                    else:
                        return "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                else:
                    error = await response.text()
                    return f"‚ùå –û—à–∏–±–∫–∞ API: {error}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async def main():
    API_KEY = "my_api_key"

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    response = await gemini_query_smart(API_KEY, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ.")
    print(f"\nü§ñ –û—Ç–≤–µ—Ç: {response}")


if __name__ == "__main__":
    asyncio.run(main())